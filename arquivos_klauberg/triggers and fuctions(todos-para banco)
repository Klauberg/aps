-- Criação de uma trigger funcion de log para quando um médico responsável é atribuído a um paciente (1)//-1 trigger -1 funcao
CREATE OR REPLACE FUNCTION novomedico()
RETURNS trigger AS
$BODY$ BEGIN
INSERT INTO Log (tabela,dt_log,Atividade) Values ('Paciente',now(),CONCAT(
(select nome from pessoa where id_pessoa=(select id_pessoa from medico where id_medico=new.ID_Medico))
,' foi adicionado como novo medico no lugar do ',
(select nome from pessoa where id_pessoa=(select id_pessoa from medico where id_medico=old.id_medico)))); 

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER updatemedico
after UPDATE of id_medico on paciente
FOR EACH ROW
EXECUTE PROCEDURE novomedico();

--

-- trigger fuction para deletar a linha de quem ja foi atendido //-1 trigger -1 funcao

CREATE OR REPLACE FUNCTION deletalinha()
RETURNS trigger AS
$BODY$ BEGIN
delete from prioridade where bl_atendimento = 't';

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER atendido
after update of bl_atendimento on prioridade
for each row
EXECUTE PROCEDURE deletalinha();

--

-- Desenvolvimento de um procedimento para verificar há quanto tempo o paciente esta na fila (0.5) //-1 funcao (+1(3 funcoes))
CREATE OR REPLACE FUNCTION tempoespera(fila integer)
RETURNS varchar(20) AS
$BODY$ BEGIN

	RETURN (select now()-(select tm_prioridade from prioridade where sn_fila=fila));

END;
$BODY$ LANGUAGE 'plpgsql';
--

--Cria medico
CREATE OR REPLACE FUNCTION criaMedico(telefone varchar(20),emergencia varchar(20), email varchar(260),nrnumero varchar(45),nrcep varchar(12),cidade varchar(100),estado varchar(100),pais varchar(100),name varchar(260),cpf varchar(15), rg varchar(10),nascimento date,usuario varchar(100),senha varchar(20),registromedico varchar(15),pagamento double precision)
RETURNS varchar(20) AS
$BODY$ BEGIN

INSERT INTO contato (nr_telefone, nr_emergencia,email) VALUES (telefone, emergencia, email);
INSERT INTO endereco (numero,cep,cidade,estado,pais) VALUES (nrnumero,nrcep,cidade,estado,pais) on conflict (numero,cep) do nothing;
INSERT INTO Pessoa (nome,cpf,rg,nascimento,id_endereco,id_contato) VALUES (name,cpf,rg,nascimento,(select id_endereco from endereco where numero = nrnumero and cep = nrcep),(select id_contato from contato where nr_telefone=telefone));
INSERT INTO login (login,password) VALUES (usuario,senha);
INSERT INTO medico (CRM,salario,id_pessoa,bl_atividade,id_login) VALUES (registromedico,pagamento,(select id_pessoa from pessoa where nome=name),'y',(select id_login from login where login=usuario));
	RETURN ('Cadastrado');

END;
$BODY$ LANGUAGE 'plpgsql';

--
-- Cria Paciente
CREATE OR REPLACE FUNCTION criaPaciente(telefone varchar(20),emergencia varchar(20), email varchar(260),nrnumero varchar(45),nrcep varchar(12),cidade varchar(100),estado varchar(100),pais varchar(100),name varchar(260),cpf varchar(15), rg varchar(10),nascimento date)
RETURNS varchar(20) AS
$BODY$ BEGIN
	
INSERT INTO contato (nr_telefone, nr_emergencia,email) VALUES (telefone, emergencia, email);
INSERT INTO endereco (numero,cep,cidade,estado,pais) VALUES (nrnumero,nrcep,cidade,estado,pais) on conflict (numero,cep) do nothing;
INSERT INTO Pessoa (nome,cpf,rg,nascimento,id_endereco,id_contato) VALUES (name,cpf,rg,nascimento,(select id_endereco from endereco where numero = nrnumero and cep = nrcep),(select id_contato from contato where nr_telefone=telefone));
INSERT INTO paciente (id_pessoa,id_medico) VALUES ((select id_pessoa from pessoa where nome=name),(select id_medico from medico where id_pessoa=(select id_pessoa from pessoa where nome='nobody')));
	RETURN ('Cadastrado');
END;
$BODY$ LANGUAGE 'plpgsql';
--

select criaMedico ('48999999967','48888888444','1@gmail.com','302','88888888','floripa','Santa Catarina','brasil','Dance Every Body','000.000.050-11','6.050.006','01/05/2000','ju','123','0050-0',10000);
select criaPaciente('48999999999','48888888888','123@gmail.com','302','88888888','floripa','Santa Catarina','brasil','Shake Every Body','000.000.000-05','0.000.000','01/01/1995');

--Ordernar Gravidade 
CREATE OR REPLACE FUNCTION prioridadefila()
RETURNS SETOF prioridade as 
$BODY$ BEGIN

return query(SELECT * from prioridade order by int_prioridade DESC); 

END;
$BODY$ LANGUAGE 'plpgsql';
--select prioridadefila();
-- Cria Especialidade
CREATE OR REPLACE FUNCTION criaEspecialidade(crmcode varchar(15),code varchar(50),name varchar(200),ativo BOOLEAN )
RETURNS varchar(20) AS
$BODY$ BEGIN
	
INSERT INTO especialidade (codigo,nome) VALUES (code, name);
INSERT INTO formacao (id_medico,codigo,bl_exercicio) VALUES ((select id_medico from medico where crm=crmcode),code,ativo);

	RETURN ('Cadastrado');
END;
$BODY$ LANGUAGE 'plpgsql';

select criaespecialidade('4454654-12','543532','virologista','t');
--

--Cria Visita
CREATE OR REPLACE FUNCTION criaVisita(temp integer,pres varchar(10),descricao varchar(360),data date,
nomepaciente varchar(260),nomemedico varchar(260) )
RETURNS varchar(20) AS
$BODY$ BEGIN
	
INSERT INTO visita (temperatura,pressao,de_estado, dt_visita,id_paciente,id_medico) VALUES
 (temp, pres,descricao,data,(select id_paciente from paciente where id_pessoa=(select id_pessoa from pessoa where nome=nomepaciente)),
(select id_medico from medico where id_pessoa=(select id_pessoa from pessoa where nome=nomemedico)));


	RETURN ('Cadastrado');
END;
$BODY$ LANGUAGE 'plpgsql';

select criaVisita(null,null,'Gripe','14-10-2018','Joaquim Pereira','Kevek Arara');

--Cria Prioridade
CREATE OR REPLACE FUNCTION criaPrioridade(urgencia integer,sentindo varchar(120),name varchar(260))
RETURNS varchar(20) AS
$BODY$ BEGIN


insert into prioridade (id_prioridade,int_prioridade,doenca,sn_fila,tm_prioridade,id_paciente,bl_atendimento)values(
(select id_prioridade from prioridade order by id_prioridade desc limit 1)+1,urgencia,sentindo,(select sn_fila from prioridade order by sn_fila desc limit 1)+1,now(),(select id_paciente from paciente where id_pessoa=(select id_pessoa from pessoa where nome=name)),'f');	
	RETURN (CONCAT('Sua senha é ',(select sn_fila from prioridade order by sn_fila desc limit 1)));
END;
$BODY$ LANGUAGE 'plpgsql';

select criaprioridade(5,'parada respiratoria','Shake Every Body');


--Cria Estadia
CREATE OR REPLACE FUNCTION criaEstadia(name varchar(260),room integer,infeccao boolean,sintomas varchar(360),data date)
RETURNS varchar(20) AS
$BODY$ BEGIN
if ((select Nr_capacidade from quarto where id_quarto=room)<>(select Nr_usando from quarto where id_quarto=room)) then 
	INSERT INTO estadia (id_paciente,id_quarto,bl_infeccao,De_Sintomas,Dt_Estadia) VALUES
 ((select id_paciente from paciente where id_pessoa=(select id_pessoa from pessoa where nome=name)),room,infeccao,sintomas,data);

	update quarto set nr_usando = ((select nr_usando from quarto where id_quarto=room)+1) where id_quarto = room;

	RETURN ('Cadastrado');

else
	RETURN ('Quarto Lotado');  	
END IF;	

	
END;
$BODY$ LANGUAGE 'plpgsql';



--Libera Estadia
CREATE OR REPLACE FUNCTION liberaEstadia(name varchar(260),room integer)
RETURNS varchar(20) AS
$BODY$ BEGIN
if ((select id_quarto from estadia where id_paciente=(select id_paciente from paciente where id_pessoa=(select id_pessoa from pessoa where nome=name)))=room) then 
	
	delete from estadia where id_quarto=room and id_paciente=(select id_paciente from paciente where id_pessoa=(select id_pessoa from pessoa where nome=name));
	update quarto set nr_usando = ((select nr_usando from quarto where id_quarto=room)-1) where id_quarto = room;

	RETURN ('Retirado');

else
	RETURN ('Confira o nome e quarto');  	
END IF;	

	
END;
$BODY$ LANGUAGE 'plpgsql';



--Entrou no quarto
CREATE OR REPLACE FUNCTION novoHospitazado()
RETURNS trigger AS
$BODY$ BEGIN
INSERT INTO Log (tabela,dt_log,Atividade) Values ('Estadia',now(),CONCAT(
(select nome from pessoa where id_pessoa=(select id_pessoa from paciente where id_paciente=new.id_paciente))
,' foi hospitalizado com suspeita de ',new.de_sintomas)); 

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER confereHospitalizado
after insert on estadia
FOR EACH ROW
EXECUTE PROCEDURE novoHospitazado();

--Log Libera Quarto
CREATE OR REPLACE FUNCTION velhoHospitazado()
RETURNS trigger AS
$BODY$ BEGIN
INSERT INTO Log (tabela,dt_log,Atividade) Values ('Estadia',now(),CONCAT(
(select nome from pessoa where id_pessoa=(select id_pessoa from paciente where id_paciente=old.id_paciente))
,' libero o quarto ',old.id_quarto)); 

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER confereDeshospitalizado
after delete on estadia
FOR EACH ROW
EXECUTE PROCEDURE velhoHospitazado();

--logs:

select criaestadia('Shake Every Body',2,'f','Parada Respiratoria','now()');
select liberaEstadia('Shake Every Body','2');

update paciente SET id_medico = 2 where id_paciente= 1;
update paciente SET id_medico = 4 where id_paciente= 2;

--







