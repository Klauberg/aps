-- Criação de uma trigger funcion de log para quando um médico responsável é atribuído a um paciente (1)//-1 trigger -1 funcao
CREATE OR REPLACE FUNCTION novomedico()
RETURNS trigger AS
$BODY$ BEGIN
INSERT INTO Log (tabela,dt_log,Atividade) Values ('Paciente',now(),CONCAT(
(select nome from pessoa where id_pessoa=(select id_pessoa from medico where id_medico=new.ID_Medico))
,' foi adicionado como novo medico no lugar do ',
(select nome from pessoa where id_pessoa=(select id_pessoa from medico where id_medico=old.id_medico)))); 

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER updatemedico
after UPDATE of id_medico on paciente
FOR EACH ROW
EXECUTE PROCEDURE novomedico();

--

-- trigger fuction para deletar a linha de quem ja foi atendido //-1 trigger -1 funcao

CREATE OR REPLACE FUNCTION deletalinha()
RETURNS trigger AS
$BODY$ BEGIN
delete from prioridade where bl_atendimento = 't';

	RETURN NULL;

END;
$BODY$ LANGUAGE 'plpgsql';

CREATE TRIGGER atendido
after update of bl_atendimento on prioridade
for each row
EXECUTE PROCEDURE deletalinha();

--

-- Desenvolvimento de um procedimento para verificar há quanto tempo o paciente esta na fila (0.5) //-1 funcao (+1(3 funcoes))
CREATE OR REPLACE FUNCTION tempoespera(fila integer)
RETURNS varchar(20) AS
$BODY$ BEGIN

	RETURN (select now()-(select tm_prioridade from prioridade where sn_fila=fila));

END;
$BODY$ LANGUAGE 'plpgsql';
--

--Cria medico
CREATE OR REPLACE FUNCTION criaMedico(telefone varchar(20),emergencia varchar(20), email varchar(260),nrnumero varchar(45),nrcep varchar(12),cidade varchar(100),estado varchar(100),pais varchar(100),name varchar(260),cpf varchar(15), rg varchar(10),nascimento date,usuario varchar(100),senha varchar(20),registromedico varchar(15),pagamento double precision)
RETURNS varchar(20) AS
$BODY$ BEGIN

INSERT INTO contato (nr_telefone, nr_emergencia,email) VALUES (telefone, emergencia, email);
INSERT INTO endereco (numero,cep,cidade,estado,pais) VALUES (nrnumero,nrcep,cidade,estado,pais) on conflict (numero,cep) do nothing;
INSERT INTO Pessoa (nome,cpf,rg,nascimento,id_endereco,id_contato) VALUES (name,cpf,rg,nascimento,(select id_endereco from endereco where numero = nrnumero and cep = nrcep),(select id_contato from contato where nr_telefone=telefone));
INSERT INTO login (login,password) VALUES (usuario,senha);
INSERT INTO medico (CRM,salario,id_pessoa,bl_atividade,id_login) VALUES (registromedico,pagamento,(select id_pessoa from pessoa where nome=name),'y',(select id_login from login where login=usuario));
	RETURN ('Cadastrado');

END;
$BODY$ LANGUAGE 'plpgsql';

--
-- Cria Paciente
CREATE OR REPLACE FUNCTION criaPaciente(telefone varchar(20),emergencia varchar(20), email varchar(260),nrnumero varchar(45),nrcep varchar(12),cidade varchar(100),estado varchar(100),pais varchar(100),name varchar(260),cpf varchar(15), rg varchar(10),nascimento date)
RETURNS varchar(20) AS
$BODY$ BEGIN
	
INSERT INTO contato (nr_telefone, nr_emergencia,email) VALUES (telefone, emergencia, email);
INSERT INTO endereco (numero,cep,cidade,estado,pais) VALUES (nrnumero,nrcep,cidade,estado,pais) on conflict (numero,cep) do nothing;
INSERT INTO Pessoa (nome,cpf,rg,nascimento,id_endereco,id_contato) VALUES (name,cpf,rg,nascimento,(select id_endereco from endereco where numero = nrnumero and cep = nrcep),(select id_contato from contato where nr_telefone=telefone));
INSERT INTO paciente (id_pessoa,id_medico) VALUES ((select id_pessoa from pessoa where nome=name),(select id_medico from medico where id_pessoa=(select id_pessoa from pessoa where nome='nobody')));
	RETURN ('Cadastrado');
END;
$BODY$ LANGUAGE 'plpgsql';
--

select criaMedico ('48999999967','48888888444','1@gmail.com','302','88888888','floripa','sc','brasil','Dance Every Body','000.000.050-11','6.050.006','01/05/2000','ju','123','0050-0',10000);
select criaPaciente('48999999999','48888888888','123@gmail.com','302','88888888','floripa','sc','brasil','Shake Every Body','000.000.000-05','0.000.000','01/01/1995');

CREATE OR REPLACE FUNCTION prioridadefila()
RETURNS SETOF prioridade as 
$BODY$ BEGIN

return query(SELECT * from prioridade order by int_prioridade DESC); 
return;
END;
$BODY$ LANGUAGE 'plpgsql';

